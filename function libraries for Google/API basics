// ALL OF THESE FUNCTIONS ARE BASED ON HABITICA'S API DOCUMENTATION
  // https://habitica.com/apidoc/
  // These functions are deployed as a library in Google Apps.
    // Script ID is AKfycbzoxB4Xp3NJYGWoGExHNvBleKmZJ19s9jQ5v6eckUVamuCFINTcsWjaBKJWVeb0McsV
  // The functions are maintained in GitHub at 
    // https://raw.githubusercontent.com/mike-the-monk/Habitica-customizations/main/function%20libraries%20for%20Google/API%20basics
// CATEGORIES FOR FUNCTIONS ARE BELOW. THEY ARE BASED ON THE API DOCUMENTATION.

// CHALLENGE

// CHAT

  // Gets chat messages given a Group ID
  function api_getChatMessagesFromGroup(groupId) {
    const params = {
      "method" : "get",
      "headers" : HEADERS,
      "muteHttpExceptions" : true,
    }
    
    const url = "https://habitica.com/api/v3/groups/" + groupId + "/chat";

    return UrlFetchApp.fetch(url, params);
  }
  
  // Posts a chat message to a group
  function api_postChatMessageToGroup(payload, groupId) {
    const params = {
      "method" : "post",
      "headers" : HEADERS,
      "contentType" : "application/json",
      "payload" : JSON.stringify(payload),
      "muteHttpExceptions" : true,
    }
    const url = "https://habitica.com/api/v3/groups/" + groupId + "/chat";
    return UrlFetchApp.fetch(url, params);
  }

  // Deletes a chat message
  function api_deleteChatMessage(groupId, chatId) {
    const params = {
      "method" : "delete",
      "headers" : HEADERS,
      "muteHttpExceptions" : true,
    }

    var url = "https://habitica.com/api/v3/groups/";
    if (groupId != "") {
      url += groupId;
      url += "/chat/";
      if (chatId != "") {
        url += chatId;
      }
    }
    return UrlFetchApp.fetch(url, params);
  }

// CONTENT

  // Gets equipment info
  function apiFree_getAllAvailableContentObjects() {
    const params = {
      "method" : "get",
      "muteHttpExceptions" : true,
    }
    
    const url = "https://habitica.com/api/v3/content";
    return UrlFetchApp.fetch(url, params);
  }

// DATA EXPORT

// GROUP

// INBOX

// MEMBER

  // Send a notification as a private message, only if they're enabled
  function api_sendPrivateMessage(payload) {
    switch (NOTIFICATIONS_ON){ // Check if notifications are on, send message if yes
          case 0:
            break;        
          case 1:
              const params = {
                "method" : "post",
                "headers" : HEADERS,
                "contentType" : "application/json",
                "payload" : JSON.stringify(payload),
                "muteHttpExceptions" : true,
              }
              const url = "https://habitica.com/api/v3/members/send-private-message";
              return UrlFetchApp.fetch(url, params);
            break;
    }
  }

  // Send a notification as a private message regardless of if they're enabled
  function api_sendPrivateMessageAlways(payload) {
    const params = {
      "method" : "post",
      "headers" : HEADERS,
      "contentType" : "application/json",
      "payload" : JSON.stringify(payload),
      "muteHttpExceptions" : true,
    }
    const url = "https://habitica.com/api/v3/members/send-private-message";
    return UrlFetchApp.fetch(url, params);
  }

// NOTIFICATION

// QUEST

// TAG

// TASK

  // Create custom tasks, including reward buttons
  function api_createNewTaskForUser(payload) {
    var params = {
      "method" : "post",
      "headers" : HEADERS,
      "contentType" : "application/json",
      "payload" : JSON.stringify(payload), // Rightmost button goes on top
      "muteHttpExceptions" : true,
    }

    var url = "https://habitica.com/api/v3/tasks/user";
    UrlFetchApp.fetch(url, params);
  }

    // Gets user tasks
  function api_getUserTasks(type) {
    const params = {
      "method" : "get",
      "headers" : HEADERS,
      "muteHttpExceptions" : true,
    }
    
    var url = "https://habitica.com/api/v3/tasks/user";
    if (type != "") {
      url += "?type=" + type;
    }

    return UrlFetchApp.fetch(url, params);
  }

  // Score a task
  function api_scoreTask(aliasOrId, direction) {
    var params = {
      "method" : "post",
      "headers" : HEADERS,
      "muteHttpExceptions" : true,
    }

    var url = "https://habitica.com/api/v3/tasks/";
    if ( (aliasOrId != "") && (direction != "") ) {
      url += aliasOrId + "/score/" + direction;
    }
    return UrlFetchApp.fetch(url, params);
  }

  // Updates a task
  function api_updateTask(taskIdOrAlias, payload) {
    const params = {
      "method" : "put",
      "headers" : HEADERS,
      "contentType" : "application/json",
      "payload" : JSON.stringify(payload),
      "muteHttpExceptions" : true,
    }

    const url = "https://habitica.com/api/v3/tasks/" + taskIdOrAlias;
    return UrlFetchApp.fetch(url, params);
  }

  // Deletes a task
  function api_deleteTask(taskIdOrAlias) {
    const params = {
      "method" : "delete",
      "headers" : HEADERS,
      "muteHttpExceptions" : true,
    }

    var url = "https://habitica.com/api/v3/tasks/";
    if (taskIdOrAlias != "") {
      url += taskIdOrAlias;
    }
    return UrlFetchApp.fetch(url, params);
  }

// USER

  // Gets user info so I can use it, especially stats like mana, experience, and level
  function api_getAuthenticatedUserProfile(userFields) {
    const params = {
      "method" : "get",
      "headers" : HEADERS,
      "muteHttpExceptions" : true,
    }
    
    var url = "https://habitica.com/api/v3/user";
    if (userFields != "") {
      url += "?userFields=" + userFields;
    }

    return UrlFetchApp.fetch(url, params);
  }

  // Changes stats
  function api_updateUser(payload) { 
    const params = {
      "method" : "put",
      "headers" : HEADERS,
      "contentType" : "application/json",
      "payload" : JSON.stringify(payload),
      "muteHttpExceptions" : true,
    }
    
    const url = "https://habitica.com/api/v3/user";
    return UrlFetchApp.fetch(url, params);
  }

// WEBHOOK

  // Create a webhook if no duplicate exists
  function apiMult_createNewWebhookNoDuplicates(payload) {
    const response = api_getWebhooks();
    const webhooks = JSON.parse(response).data;
    var duplicateExists = 0;
      
    for (var i in webhooks) {
      if (webhooks[i].label == payload.label) {
        duplicateExists = 1;
      }
    }
    // If webhook to be created doesn't exist yet
    if (!duplicateExists) {
      api_createNewWebhook(payload);
    }
  }

  // Used to see existing webhooks, and therefore if there's a duplicate
  function api_getWebhooks() {
    const params = {
      "method" : "get",
      "headers" : HEADERS,
      "muteHttpExceptions" : true,
    }
    
    const url = "https://habitica.com/api/v3/user/webhook";
    return UrlFetchApp.fetch(url, params);
  }

  // Creates a webhook (as part of the "don't make it if there's a duplicate" function)
  function api_createNewWebhook(payload) {
    const params = {
      "method" : "post",
      "headers" : HEADERS,
      "contentType" : "application/json",
      "payload" : JSON.stringify(payload),
      "muteHttpExceptions" : true,
    }
    
    const url = "https://habitica.com/api/v3/user/webhook";
    return UrlFetchApp.fetch(url, params);
  }

  // Updates webhook
  function api_updateWebhook(webhookUrl, payload){
    const params = {
      "method" : "put",
      "headers" : HEADERS,
      "contentType" : "application/json",
      "payload" : JSON.stringify(payload),
      "muteHttpExceptions" : true,
    }
  
    const url = "https://habitica.com/api/v3/user/webhook/" + webhookUrl;
    return UrlFetchApp.fetch(url, params);
  }
